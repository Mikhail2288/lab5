import static java.lang.System.out;
import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.AbstractMap;
import java.util.Map;
import java.util.stream.Collectors;
public class Main {
    //3.8
    public static <T> List<T> findUniqueElements(List<T> L1, List<T> L2) {
        Set<T> L = new HashSet<>();//создаем множество для уникальности элементов
        for (T element : L1) {
            if (!L2.contains(element)) L.add(element);
        }
        return new ArrayList<>(L);
    }
    //4.8
    public static void findTopTwoStudents(String file) {
        Map<String, Integer> school50Scores = new HashMap<>();
        try (Scanner scanner = new Scanner(new File(file))) {
            int n = scanner.nextInt();
            scanner.nextLine();

            for (int i = 0; i < n; i++) {
                String line = scanner.nextLine();
                String[] parts = line.split(" ");
                String lastName = parts[0];
                String firstName = parts[1];
                int school = Integer.parseInt(parts[2]);
                int score = Integer.parseInt(parts[3]);
                if (school == 50) school50Scores.put(lastName + " " + firstName, score);
            }
        } catch (FileNotFoundException e) {
            System.err.println("файл не найден: " + e.getMessage());
        }

        int maxScore = 0;
        for (int score : school50Scores.values()) {
            maxScore = Math.max(maxScore, score);
        }
        List<String> topStudents = new ArrayList<>();
        for (Map.Entry<String, Integer> entry : school50Scores.entrySet()) {
            if (entry.getValue() == maxScore) {
                topStudents.add(entry.getKey());
            }
        }

        int preMaxScore = 0;
        for (int score : school50Scores.values()) {
            if (score > preMaxScore && score < maxScore) {
                preMaxScore = score;
            }
        }
        List<String> preTopStudents = new ArrayList<>();
        for (Map.Entry<String, Integer> entry : school50Scores.entrySet()) {
            if (entry.getValue() == preMaxScore) {
                preTopStudents.add(entry.getKey());
            }
        }

        if (topStudents.size() > 2) {
            out.println(topStudents.size());
        } else if (topStudents.size() == 1 && preTopStudents.size() == 1) {
            out.println(topStudents.get(0));
            out.println(preTopStudents.get(0));
        } else if (topStudents.size() == 1 && preTopStudents.size() > 1){
            out.println(topStudents.get(0));
        }
    }
    //5.8
    public static int missinglettersintext(String file){
        Set<Character> lettersInText = new HashSet<>();

        try (Scanner scanner = new Scanner(new File(file))) {
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine().toLowerCase();
                for (char c : line.toCharArray()) {
                    if (Character.isLetter(c)) {
                        lettersInText.add(c);
                    }
                }
            }
        } catch (FileNotFoundException e) {
            System.err.println("файл не найден: " + e.getMessage());
        }

        Set<Character> missingLetters = new HashSet<>();
        for (char i = 'а'; i <= 'я'; i++) {
            missingLetters.add(i);
        }
        missingLetters.removeAll(lettersInText);
        return missingLetters.size();
    }
    //6.3
    public static <T> boolean hasConsecutiveEquals(Queue<T> queue) {
        if (queue == null || queue.size() < 2) return false;

        Iterator<T> iterator = queue.iterator();
        T prev = iterator.next();
        while (iterator.hasNext()) {
            T current = iterator.next();
            if (prev.equals(current)) return true;
            prev = current;
        }
        //Проверка последнего и первого элемента
        return queue.peek().equals(prev);
    }
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        Main m = new Main();
        //1.1
        interfacefraction f1 = new cashfraction(1, 2);
        out.println("Дробь в обычном виде: " + f1);
        out.println("Дробь в вещественном виде: " + f1.getDecimalValue());
        f1.setNumerator(0);
        out.println("Дробь в обычном виде: " + f1);
        out.println("Дробь в вещественном виде: " +f1.getDecimalValue());
        f1.setDenominator(4);
        out.println("Дробь в обычном виде: " + f1);
        out.println("Дробь в вещественном виде: " + f1.getDecimalValue());
        out.println(f1.hashCode());
        interfacefraction f2 = new cashfraction(1, 2);
        out.println(f1.equals(f2));
        //3.8
        out.println("3.8");
        List<Integer> L1 = new ArrayList<>(List.of(1, 2, 3, 4, 4, 5, 6));
        List<Integer> L2 = new ArrayList<>(List.of(3, 5, 7, 8));
        List<Integer> L = findUniqueElements(L1, L2);
        out.println("Список L (Integer): " + L);
        List<String> L3 = new ArrayList<>(List.of("apple", "banana", "cherry"));
        List<String> L4 = new ArrayList<>(List.of("banana", "date"));
        List<String> L5 = findUniqueElements(L3, L4);
        out.println("Список L (String): " + L5);
        //4.8
        out.println("4.8");
        String file = "C:\\Users\\mifan\\IdeaProjects\\lab4\\out\\production\\lab4\\students.txt";
        out.print("Более одного лучших: " );
        findTopTwoStudents(file);
        String file2 = "C:\\Users\\mifan\\IdeaProjects\\lab4\\out\\production\\lab4\\students2.txt";
        out.println("Первое и второе место:" );
        findTopTwoStudents(file2);
        String file3 = "C:\\Users\\mifan\\IdeaProjects\\lab4\\out\\production\\lab4\\students3.txt";
        out.print("Высший балл набрал один человек, а следующий балл набрало несколько человек:" );
        findTopTwoStudents(file3);
        //5.8
        out.println("5.8");
        String filetext = "C:\\Users\\mifan\\IdeaProjects\\lab4\\out\\production\\lab4\\students.txt";
        out.println("Количество не встречающихся букв в тексте: "+ missinglettersintext(filetext));
        //6.3
        out.println("6.3");
        Queue<Integer> queue = new LinkedList<>();
        queue.add(10);
        queue.add(20);
        queue.add(30);
        queue.add(40);
        queue.add(10);
        out.println("В очереди L хотя бы один элемент, который равен следующему за ним - " + hasConsecutiveEquals(queue));
        //7.2
        out.println("7.2");
        Path path = Path.of("C:\\Users\\mifan\\IdeaProjects\\lab4\\out\\production\\lab4\\peopleandnumbers.txt");
        try {
            Map<Integer, List<String>> result = Files.lines(path)//Читаем строки из файла и возвращаем последовательность строк
                    .map(line -> line.split(":"))//делаем сплит строки по двоеточию
                    .filter(parts -> parts.length == 2 && !parts[1].isEmpty())//Оставляем в потоке только те массивы, которые состоят из двух элементов, и есть номер
                    .map(parts -> {
                        String name = formatName(parts[0].trim()); // форматируем имя, первая буква большая, остальные маленькие
                        int number = Integer.parseInt(parts[1].trim()); // парсим номер в инт
                        return new AbstractMap.SimpleEntry<>(name, number);// возвращаем пару имя-номер
                    })
                    // группируем по номерам
                    .collect(Collectors.groupingBy(
                            Map.Entry::getValue, //группировка по номеру
                            Collectors.mapping(Map.Entry::getKey, Collectors.toList())// собираем имена в список для каждого номера
                    ));

            out.println(result);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static String formatName(String name) {// метод для форматирования имени
        if (name == null || name.isEmpty()) return name;
        return name.substring(0, 1).toUpperCase() + name.substring(1).toLowerCase();//форматируем имя
    }
}
